@page "/manage-tasks"
@inject HttpClient http
@using Domain.ViewModel
@using WebClient.Abstractions
@using WebClient.Shared.Models
@using WebClient.Components
@using WebClient.Shared.Components
@using Domain.ClientSideModels
@inject IMemberDataService memberService;
@inject ITaskDataService taskDataService;
@inject WebClient.Services.StateContainer StateContainer
@if (isLoaded)
{
    <div class="page-wrapper row m-0 col-12 p-0">
        <div class="col-4 p-0">
            <LeftMenu />
        </div>
        <div class="col-8 p-0">
            @if (showLister)
            {
                <div class="col-10 offset-1 pt-5">
                    <div class="row m-0">
                        <Field class="col-9 p-0 custom-input">
                            <TextEdit Placeholder="Enter New Task" @bind-text="@newTask" />
                        </Field>
                        <div class="col-3 p-0 text-right">
                            <Button class="add-btn px-4" @onclick="@OnAddItem">Add</Button>
                        </div>
                    </div>
                </div>
                <div class="col-10 offset-1">
                    <TaskListerComponent />
                </div>
            }
            @if (false)
            {
                <div class="col-10 offset-1 pt-5">
                </div>
            }
        </div>
    </div>
}

@code {

    public MenuItem member;
    public TaskVm task { get; set; }
    public string newTask;


    private bool isLoaded;
    private bool showLister;

    protected override Task OnInitializedAsync()
    {
        showLister = true;
        isLoaded = true;
        return base.OnInitializedAsync();
    }

    private async void OnAddItem()
    {
        var task = new TaskModel()
        {
            Id = Guid.NewGuid(),
            IsDone = false,
            Text = newTask
        };

        newTask = string.Empty;

        if (memberService.SelectedMember != null)
        {
            task.Member = memberService.SelectedMember.Id;
        }
        else
        {
            task.Member = null;
        }
        Boolean data = await taskDataService.AddTask(task);
        if (data)
        {
            if (memberService.SelectedMember != null)
            {
                memberService.SelectMember(task.Member != null ? (Guid)task.Member : Guid.Empty);
            }
            else
            {
                memberService.SelectNullMember();
            }
        }
        StateHasChanged();
    }

    public void DragStart(TaskVm item)
    {
        StateContainer.SetTask(item);
    }

    public async void OnDrop(MenuItem item)
    {
        TaskVm taskVm = new TaskVm();
        if (StateContainer.Task != null && StateContainer.Task.Id != Guid.Empty)
        {
            Boolean data = await taskDataService.AssignTask(item, StateContainer.Task);
            if (data)
            {
                if (memberService.SelectedMember != null)
                {
                    memberService.SelectMember(item.referenceId != null ? (Guid)item.referenceId : Guid.Empty);
                }
                else
                {
                    memberService.SelectNullMember();
                }
            }
        }
        StateContainer.Task = taskVm;
    }



}