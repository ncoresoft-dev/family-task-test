@using WebClient.Abstractions
@using WebClient.Shared.Models
@using Domain.ViewModel

@using Core.Extensions.ModelConversion
@using Domain.ClientSideModels
@using Plk.Blazor.DragDrop
@inject ITaskDataService taskService;
@inject IMemberDataService memberService;
@inject WebClient.Abstractions.IMemberDataService memberService
@inherits WebClient.Pages.ManageTasks
@namespace WebClient.Components

<style>
    .task-wrapper .task-item {
        background: #FFFFFF;
        border: 1px solid #C5C9C9;
        box-sizing: border-box;
        border-radius: 8px;
        font-size: 24px;
        font-family: "Poppins Light";
    }

    .done-text {
        text-decoration: line-through;
    }

    .task-wrapper .avtar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
    }

    @@media(max-width: 1400px) {
        .task-wrapper .task-item {
            font-size: 16px;
        }

        .task-wrapper .avtar {
            width: 24px;
            height: 24px;
        }

        .delete-icon {
            width: 25px;
        }
    }

    @@media(max-width: 767.98px) {
        .task-wrapper .avtar {
            width: 16px;
            height: 16px;
        }
    }

    .noassign .custom-checkbox .custom-control-label::before {
        display: none !important
    }
</style>

<div class="task-wrapper">
    @if (tasks != null)
    {
        <Dropzone Items="tasks">
            @*@foreach (var item in tasks)
                {*@
            @if (@context.AssignedToId == null)
            {
                <div draggable="true" class="task-item p-3 my-3 row m-0" @ondragstart="()=>OnDragStart(context)" id=@(@context.Id)>
                    @if (@context.AssignedToId != null)
                    {
                        <div class="col-10 p-0">
                            <Check TValue="bool" Disabled="@context.IsComplete" Checked="@context.IsComplete" CheckedChanged="@(val => ToggleTask(@context))">
                                <span class="@(@context.IsComplete ? "done-text" : "")">@context.Subject</span>
                            </Check>
                        </div>
                    }
                    else
                    {
                        <div class="col-10 p-0 noassign">
                            <Check TValue="bool" Disabled="@context.IsComplete" Checked="@context.IsComplete" CheckedChanged="@(val => ToggleTask(@context))">
                                <span class="@(@context.IsComplete ? "done-text" : "")">@context.Subject</span>
                            </Check>
                        </div>
                    }
                    <div class="col-2 p-0 d-flex justify-content-end align-items-center">
                        @if (@context.AssignedToId != null && selectedMember != null)
                        {
                            <div class="avtar mr-1" style="background-color: @selectedMember.Avatar;"></div>
                        }
                        else
                        {
                            <div class="avtar mr-1" style="background-color: @GetMemberColor(@context.AssignedToId);"></div>
                        }
                        <img class="delete-icon" src="/assets/images/delete-icon.svg" />
                    </div>
                </div>
            }
            else
            {
                <div class="task-item p-3 my-3 row m-0">
                    @if (@context.AssignedToId != null)
                    {
                        <div class="col-10 p-0">
                            <Check TValue="bool" Disabled="@context.IsComplete" Checked="@context.IsComplete" CheckedChanged="@(val => ToggleTask(@context))">
                                <span class="@(@context.IsComplete ? "done-text" : "")">@context.Subject</span>
                            </Check>
                        </div>
                    }
                    else
                    {
                        <div class="col-10 p-0 noassign">
                            <Check TValue="bool" Disabled="@context.IsComplete" Checked="@context.IsComplete" CheckedChanged="@(val => ToggleTask(@context))">
                                <span class="@(@context.IsComplete ? "done-text" : "")">@context.Subject</span>
                            </Check>
                        </div>
                    }
                    <div class="col-2 p-0 d-flex justify-content-end align-items-center">
                        @if (@context.AssignedToId != null && selectedMember != null)
                        {
                            <div class="avtar mr-1" style="background-color: @selectedMember.Avatar;"></div>
                        }
                        else
                        {
                            <div class="avtar mr-1" style="background-color: @GetMemberColor(@context.AssignedToId);"></div>
                        }
                        <img class="delete-icon" src="/assets/images/delete-icon.svg" />
                    </div>
                </div>
            }

            @*}*@
        </Dropzone>
    }


</div>

@code  {
    private List<TaskVm> tasks = new List<TaskVm>();
    private MemberVm selectedMember;
    [Parameter] public MenuItem[] MenuItems { get; set; }
    [Parameter] public MenuItem Member { get; set; }
    protected override Task OnInitializedAsync()
    {
        MenuItems = memberService.Members.ToMenuItems();
        memberService.SelectedMemberChanged += MemberServiceOnSelectedMemberChanged;
        taskService.TasksUpdated += TaskServiceOnTasksUpdated;
        LoadCurrentTasks();
        return base.OnInitializedAsync();
    }

    private void ToggleTask(TaskVm model)
    {
        taskService.ToggleTask(model.Id);
        StateHasChanged();
    }

    private void TaskServiceOnTasksUpdated(object sender, EventArgs e)
    {
        LoadCurrentTasks();
    }

    private void MemberServiceOnSelectedMemberChanged(object sender, EventArgs e)
    {
        LoadCurrentTasks();
    }

    private void LoadCurrentTasks()
    {
        try
        {
            selectedMember = memberService.SelectedMember;
            if (selectedMember == null || selectedMember.Id == Guid.Empty)
            {
                tasks = taskService.Tasks;
                StateHasChanged();
                return;
            }
            else
            {
                tasks = taskService.Tasks.Where(t => t.AssignedToId == selectedMember.Id).ToList();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private string GetMemberColor(Guid? id)
    {
        Member = MenuItems.Where(x => x.referenceId == id).FirstOrDefault();
        if (Member != null)
        {
            return Member.iconColor;
        }
        else
        {
            return "";
        }
    }

    public void OnDragStart(TaskVm item)
    {
        DragStart(item);
    }
}