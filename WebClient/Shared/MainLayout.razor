@inherits LayoutComponentBase
@using WebClient.Abstractions
@using WebClient.Shared.Models
@using Domain.ViewModel

@using Core.Extensions.ModelConversion
@using Domain.ClientSideModels

@inject ITaskDataService taskService;
@inject IMemberDataService memberService;
@inject WebClient.Abstractions.IMemberDataService memberService
<head>
    <Link href="_content/blazor-draddrop/dragdrop.css" rel="stylesheet" />
</head>
<div class="main">
    <div class="top-row row m-0 col-12 px-4">
        <div class="col-6 p-0">
            <img class="logo" src="/assets/images/logo.svg" />
        </div>
        <div class="col-6 p-0 d-flex justify-content-end">
            <Link class="label custom-btn py-2 px-5 mx-2 py-sm-1 px-sm-3" To="members"> Members </Link>
            <Link class="label custom-btn py-2 px-5 mx-2 py-sm-1 px-sm-3" To="manage-tasks"> Manage Tasks </Link>
        </div>
    </div>

    <div class="content">
        @Body
    </div>
</div>
@code{

    private List<TaskVm> tasks = new List<TaskVm>();
    private MemberVm selectedMember;
    [Parameter] public MenuItem[] MenuItems { get; set; }
    [Parameter] public MenuItem Member { get; set; }

    protected override Task OnInitializedAsync()
    {
        MenuItems = memberService.Members.ToMenuItems();
        memberService.SelectedMemberChanged += MemberServiceOnSelectedMemberChanged;
        taskService.TasksUpdated += TaskServiceOnTasksUpdated;
        LoadCurrentTasks();
        return base.OnInitializedAsync();
    }

    private void TaskServiceOnTasksUpdated(object sender, EventArgs e)
    {
        LoadCurrentTasks();
    }

    private void MemberServiceOnSelectedMemberChanged(object sender, EventArgs e)
    {
        LoadCurrentTasks();
    }

    private void LoadCurrentTasks()
    {
        try
        {

            selectedMember = memberService.SelectedMember;

            if (selectedMember == null || selectedMember.Id == Guid.Empty)
            {
                tasks = taskService.Tasks;
                StateHasChanged();
                return;
            }
            else
            {
                tasks = taskService.Tasks.Where(t => t.AssignedToId == selectedMember.Id).ToList();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

}